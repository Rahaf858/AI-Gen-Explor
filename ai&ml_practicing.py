# -*- coding: utf-8 -*-
"""AI&ML_Practicing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EoCcgwTTMDXrD_j2guccpGf-7B4EWDCJ

###N-Grams
"""

!pip install nltk

import nltk
from nltk.tokenize import word_tokenize
from nltk.util import ngrams
nltk.download("punkt_tab")

sample_text = "I love programming"
tokens = word_tokenize(sample_text)
bigrams = list(ngrams(tokens, 2))
trigrams = list(ngrams(tokens, 3))
print(bigrams)
print(trigrams)
print(tokens)

sample_text = "My name is Rahaf, I am programmer"
tokens = word_tokenize(sample_text)

unigrams = list(ngrams(tokens, 1))

bigrams = list(ngrams(tokens, 2))


trigrams = list(ngrams(tokens, 3))


print(unigrams)
print(bigrams)
print(trigrams)

!pip install scikit-learn

"""###Text Classification"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

texts = [
  'I love programming.', 'Python is amazing.',
  'I enjoy machine learning.', 'The weather is nice today.', 'I like algo.',
  'Machine learning is fascinating.', 'Natural Language Processing is a part of AI.'
]

labels = [
  'tech', 'tech', 'tech', 'non-tech', 'tech', 'tech', 'tech'
]

vectorizer = CountVectorizer()
x = vectorizer.fit_transform(texts)

x_train, x_test, y_train, y_test = train_test_split(x,labels, test_size=0.2, random_state=42)

model = MultinomialNB()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: ", accuracy)

"""##Machin Translation"""

!pip install translate

from translate import Translator

translate_jp = Translator(from_lang="en" , to_lang="ja")
translate_ar = Translator(from_lang="en" , to_lang="ar")
translate_fr = Translator(from_lang="en" , to_lang="fr")

text = "I love Programming"

translation_jp = translate_jp.translate(text)
translation_ar = translate_ar.translate(text)
translation_fr = translate_fr.translate(text)
print(translation_jp)
print(translation_ar)
print(translation_fr)

"""###Spellling Correcting

"""

!pip install textblob

from textblob import TextBlob

text = 'I love progammin an macine learnig.'

blob = TextBlob(text)

corrected_text = blob.correct()
print("Orginial:", text)
print("New: ", corrected_text)

"""### Final Project

A simple tool to help you decide if a movie is worth watching based on text reviews. By analyzing if the reviews are positive or negative, you can get a sense of whether people liked the movie or not.
"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

reveiws = [
    '''A visually stunning and emotionally resonant journey. The film's vibrant characters and innovative storytelling keep you engaged from start to finish.''',
    '''Bursting with creative energy and unexpected charm, this movie offers a delightful mix of humor and heart that lifts your spirits.''',
    '''Despite the buzz, the film struggles with a muddled plot and uninspired performances, leaving viewers disappointed and disengaged.''',
    '''The movieâ€™s lackluster narrative and clumsy execution make it hard to remain invested. It feels like a missed opportunity to explore richer storytelling.'''
]

lables = ["positive","positive","negative","negative"]

vectorizer = CountVectorizer()
x = vectorizer.fit_transform(reveiws)

x_tarin, x_test, y_train, y_test = train_test_split(x, lables, test_size=0.2, random_state=42)

model = MultinomialNB()
model.fit(x_tarin, y_train)

y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print("The Accuracy of the Model: ", accuracy)

if accuracy > 0.8:
  print("The Model is Good")
else:
  print("The Model is Bad")